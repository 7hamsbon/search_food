<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ham.dao.FriendshipMapper" >
  <resultMap id="BaseResultMap" type="com.ham.entity.Friendship" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="fans" property="fans" jdbcType="BIGINT" />
    <result column="follower" property="follower" jdbcType="BIGINT" />
    <result column="friend_time" property="friendTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, fans, follower, friend_time
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.ham.entity.FriendshipExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from friendship
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from friendship
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from friendship
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.ham.entity.FriendshipExample" >
    delete from friendship
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.ham.entity.Friendship" >
    insert into friendship (id, fans, follower, 
      friend_time)
    values (#{id,jdbcType=BIGINT}, #{fans,jdbcType=BIGINT}, #{follower,jdbcType=BIGINT}, 
      #{friendTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.ham.entity.Friendship" keyProperty="id" useGeneratedKeys="true" >
    insert IGNORE into friendship
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="fans != null" >
        fans,
      </if>
      <if test="follower != null" >
        follower,
      </if>
      <if test="friendTime != null" >
        friend_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="fans != null" >
        #{fans,jdbcType=BIGINT},
      </if>
      <if test="follower != null" >
        #{follower,jdbcType=BIGINT},
      </if>
      <if test="friendTime != null" >
        #{friendTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.ham.entity.FriendshipExample" resultType="java.lang.Integer" >
    select count(*) from friendship
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update friendship
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.fans != null" >
        fans = #{record.fans,jdbcType=BIGINT},
      </if>
      <if test="record.follower != null" >
        follower = #{record.follower,jdbcType=BIGINT},
      </if>
      <if test="record.friendTime != null" >
        friend_time = #{record.friendTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update friendship
    set id = #{record.id,jdbcType=BIGINT},
      fans = #{record.fans,jdbcType=BIGINT},
      follower = #{record.follower,jdbcType=BIGINT},
      friend_time = #{record.friendTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.ham.entity.Friendship" >
    update friendship
    <set >
      <if test="fans != null" >
        fans = #{fans,jdbcType=BIGINT},
      </if>
      <if test="follower != null" >
        follower = #{follower,jdbcType=BIGINT},
      </if>
      <if test="friendTime != null" >
        friend_time = #{friendTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ham.entity.Friendship" >
    update friendship
    set fans = #{fans,jdbcType=BIGINT},
      follower = #{follower,jdbcType=BIGINT},
      friend_time = #{friendTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <!--以下为自定义方法-->
  <select id="selectFollwerByFansId" parameterType="java.lang.Long" resultType="java.lang.Long">
      SELECT follower
      FROM friendship
      <where>
          fans = #{fansId}
      </where>
  </select>

    <select id="selectFansByFollowerId" parameterType="java.lang.Long" resultType="java.lang.Long">
        SELECT fans
        FROM friendship
        <where>
            follower = #{followerId}
        </where>
    </select>

  <select id="countSameFans" resultType="java.lang.Long">
    SELECT count(*)
    FROM (
           SELECT *
           FROM (SELECT *
                 FROM user where id in (select fans from friendship where follower = #{userId1})
                 UNION ALL
                 SELECT *
                 FROM user where id in (select fans from friendship where follower = #{userId2})
                ) a
           GROUP BY id
           HAVING COUNT(*) > 1 ) a;
  </select>

  <select id="countSameFollowers" resultType="java.lang.Long">
    SELECT count(*)
    FROM (
           SELECT *
           FROM (SELECT *
                 FROM user where id in (select follower from friendship where fans = #{userId1})
                 UNION ALL
                 SELECT *
                 FROM user where id in (select follower from friendship where fans = #{userId2})
                ) a
           GROUP BY id
           HAVING COUNT(*) > 1 ) a;
  </select>

</mapper>